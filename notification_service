import 'package:app_settings/app_settings.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:get/get.dart';
import 'package:permission_handler/permission_handler.dart';
import '../utils/dependencies.dart';
//ignore_for_file: use_build_context_synchronously

class NotificationService {
  FirebaseMessaging messaging = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin localNotificationsPlugin = FlutterLocalNotificationsPlugin();

  void requestNotificationPermission() async{
    NotificationSettings settings = await messaging.requestPermission(
      alert: true,
      announcement: true,
      badge: true,
      carPlay: true,
      criticalAlert: true,
      provisional: true,
      sound: true,
    );

    if(settings.authorizationStatus == AuthorizationStatus.authorized){
    }
    else if(settings.authorizationStatus == AuthorizationStatus.provisional){
    }
    else{
      Get.snackbar("Permission Denied", "Please allow notifications permission to receive updates",
      snackPosition: SnackPosition.BOTTOM);
      Future.delayed(const Duration(seconds: 2),(){
        AppSettings.openAppSettings(type: AppSettingsType.notification);
      });
    }

    final status = await Permission.notification.status;
    if (!status.isGranted) {
      await Permission.notification.request();
    }
  }

  //Local Notification Init
  void initLocalNotification(context, RemoteMessage message) async{
    var androidSettings = const AndroidInitializationSettings("@drawable/logo");
    var iosSettings = const DarwinInitializationSettings();
    var initializeSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings
    );

    await localNotificationsPlugin.initialize(
      initializeSettings,
      onDidReceiveNotificationResponse: (payload) {
        handleMessage(context, message);
      },
    );
  }

  //FIREBASE INIT
  void firebaseInit(BuildContext context) {
    FirebaseMessaging.onMessage.listen((message){
      if(kDebugMode){
        print("notification title: ${message.notification!.title}");
        print("notification body: ${message..notification!.body}");
      }
      if(Platform.isIOS){
        iosForegroundMessage();
        showNotification2(message);
      }
      if(Platform.isAndroid){
        initLocalNotification(context,message);
        showNotification2(message);
      }
    });
  }


  Future<void> showNotification2(RemoteMessage message) async {

    AndroidNotificationChannel channel = AndroidNotificationChannel(
        message.data["channel_id"].toString(),
        message.data["channel_id"].toString(),
        importance: Importance.high,
        showBadge: true,
        playSound: true);

    AndroidNotificationDetails androidNotificationDetails =
    AndroidNotificationDetails(
        channel.id.toString(),
        channel.name.toString(),
        channelDescription: "myUIC Notification Service",
        importance: Importance.high,
        icon: '@drawable/logo',
        priority: Priority.high,
        playSound: true);

    DarwinNotificationDetails initializationSettings = const DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      presentBanner: true,
    );

    NotificationDetails notificationDetails = NotificationDetails(
        iOS: initializationSettings,
        android: androidNotificationDetails
    );

    Future.delayed(Duration.zero, (){
      localNotificationsPlugin.show(
          DateTime.now().millisecondsSinceEpoch ~/ 1000,
          message.notification!.title.toString(),
          message.notification!.body.toString(),
          notificationDetails,
          payload: "my_data");
    });
  }

  //Background & Terminated State
  Future<void> setupInteractMessage(BuildContext context) async {
    //Background State
    FirebaseMessaging.onMessageOpenedApp.listen((message){
      if(message.data.isNotEmpty){
        showNotification2(message);
      }
      handleMessage(context, message);
    });
    //Terminated State
    messaging.getInitialMessage().then((RemoteMessage? message){
      if(message != null && message.data.isNotEmpty){
        showNotification2(message);
        handleMessage(context, message);
      }
    });
  }

  //Handle Message
  Future<void> handleMessage(BuildContext context, RemoteMessage message) async {
  //  Navigator.push(context, MaterialPageRoute(builder: (context)=> const NotificationScreen()));
  }

  //IOS MESSAGE
  Future iosForegroundMessage() async{
    await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(
      alert: true,
      badge: true,
      sound: true,
    );
  }

  Future<void> showNotification({
    required String title,
    required String body,
  }) async {
    await localNotificationsPlugin.show(
      0,
      title,
      body,
      const NotificationDetails(
        android: AndroidNotificationDetails(
            'myUIC',
            'myUIC',
            channelDescription: "myUIC Notification Service",
            importance: Importance.high,
            icon: '@drawable/logo',
            priority: Priority.high,
            playSound: true),
      ),
    );
  }

}
